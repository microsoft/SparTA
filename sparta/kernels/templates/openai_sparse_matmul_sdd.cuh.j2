{# Copyright (c) Microsoft Corporation. #}
{# Licensed under the MIT license. #}

{% set IDX_T = "long long" if BCSR and BCSC else "int" %}

__device__ __forceinline__ const float* add_ptr_f(const float* src, int offset) \
{                                                                               \
    const float* dst;                                                           \
    asm("{                       \n\t"                                          \
        ".reg .u32 lo,hi,of;     \n\t"                                          \
        "mul.lo.u32 of, %2, %3;  \n\t"                                          \
        "mov.b64    {lo,hi}, %1; \n\t"                                          \
        "add.cc.u32  lo,lo,  of; \n\t"                                          \
        "addc.u32    hi,hi,  0;  \n\t"                                          \
        "mov.b64 %0, {lo,hi};    \n\t"                                          \
        "}" : "=l"(dst) : "l"(src), "r"(offset), "r"((int)sizeof(*src)));       \
    return dst;                                                                 \
}

__device__ __forceinline__ float2 _add(float2 x, float2 y) \
{                                                          \
    float2 res;                                            \
    res.x = x.x + y.x;                                     \
    res.y = x.y + y.y;                                     \
    return res;                                            \
}

__global__ void BLOCK_SPARSE_MATMUL_32_64_32(
    float* A_val,
    float* B,
    {% if BIASED %}float* bias,{% endif %}
    float* C,
    int* A_block_ptr,
    {{ IDX_T }}* A_block_idx,
    int A_block_nnz,
    int M,
    int K,
    int N
) {
    /*
    description:
    tiling k dimension
    tile size: 32x64x32
    smm_sd_d_nn: sparse matmul, sparse (MxK, along K, K major bcs) x dense (NxK, along K) -> dense (MxN, along N)
    smm_sd_d_nt: sparse matmul, sparse (MxK, along K, K major bcs) x dense (KxN, along N, need TRANSPOSE_B) -> dense (MxN, along N)
    smm_sd_d_tn: sparse matmul, sparse (KxM, along M, K major bcs, need TRANSPOSE_A) x dense (NxK, along K) -> dense (MxN, along N)
    smm_sd_d_tt: sparse matmul, sparse (KxM, along M, K major bcs, need TRANSPOSE_A) x dense (KxN, along N, need TRANSPOSE_B) -> dense (MxN, along N)
    block sparse matrix (block size: 32x64) X dense matrix -> dense matrix
    */
    const int BLOCK_SIZE_M = 32;  // 64
    const int BLOCK_SIZE_K = 64;  //8
    const int BLOCK_SIZE_N = 32;  //128
    const int THREAD_SIZE_K = 64;

    {% if BATCHED %}
    {% if COMPRESSED %}
    A_val += A_block_nnz*64*32*blockIdx.z;
    {% else %}
    A_val += M*K*blockIdx.z;
    {% endif %}
    B += K*N*blockIdx.z;
    C += M*N*blockIdx.z;
    {% if BIASED %}
    bias += N*blockIdx.z;
    {% endif %}
    {% endif %}

    assert(blockDim.x % 32 == 0);
    uint n_warp = 8; // blockDim.x / 32
    assert(THREAD_SIZE_K % n_warp == 0);
    // THREAD_SIZE_K: one loop k
    assert(K % THREAD_SIZE_K == 0);

    assert(BLOCK_SIZE_M == BLOCK_SIZE_N);
    __shared__ float fShare[65 * 32 * 2];
    char* bShare = (char*)fShare;
    {% if BIASED %}__shared__ float bias_share[BLOCK_SIZE_N];{% endif %}

    uint tid = threadIdx.x;
    uint bx = blockIdx.x; // N
    uint by = blockIdx.y; // M
    {% if BIASED %}
    if (tid < BLOCK_SIZE_N) {
        bias_share[tid] = bias[bx * BLOCK_SIZE_N + tid % 32]; 
    }
    {% endif %}
    uint tx = tid % 16;
    uint ty = tid / 16;
    assert(THREAD_SIZE_K % 16 == 0);

    {% if COMPRESSED %}
    // A is stored in sparse format
        {% if BCSR and BCSC %}
            {% if TRANSPOSE_B %}
    uint ori_offsetA00 = tid * 4;
    uint ori_offsetA16 = ori_offsetA00 + BLOCK_SIZE_M * 32;
            {% else %}
    uint ori_offsetA00 = ty * BLOCK_SIZE_K + tx * 4;
    uint ori_offsetA16 = ori_offsetA00 + BLOCK_SIZE_K * 16;
    uint storA = (tid * 4 + tid / (BLOCK_SIZE_M/4) / 4 * 2) * 4;
            {% endif %}
        {% else %}
            {% if TRANSPOSE_A %}
    uint offsetA00 = (A_block_ptr[by] - 1) * BLOCK_SIZE_M * BLOCK_SIZE_K + tid * 4;
    uint offsetA16 = offsetA00 + BLOCK_SIZE_M * 32;
    uint storA = (tid * 4 + tid / (BLOCK_SIZE_M/4) / 4 * 2) * 4;
            {% else %}
    uint offsetA00 = (A_block_ptr[by] - 1) * BLOCK_SIZE_M * BLOCK_SIZE_K + ty * BLOCK_SIZE_K + tx * 4;
    uint offsetA16 = offsetA00 + BLOCK_SIZE_K * 16;
            {% endif %}
        {% endif %}
    {% else %}
    // A is stored in dense format
        {% if TRANSPOSE_A %}
    uint ori_offsetA00 = tid / (BLOCK_SIZE_M/4) * M + by * BLOCK_SIZE_M + (tid % (BLOCK_SIZE_M/4)) * 4;
    uint ori_offsetA16 = ori_offsetA00 + M * 32;
    uint storA = (tid * 4 + tid / (BLOCK_SIZE_M/4) / 4 * 2) * 4;
        {% else %}
    uint ori_offsetA00 = (by * 32 + ty) * K + tx * 4;
    uint ori_offsetA16 = ori_offsetA00 + K * 16;
        {% endif %}
    {% endif %}

    // B is stored in dense format
    {% if TRANSPOSE_B %}
    uint ori_offsetB00 = (bx * 32 + ty) * K + tx * 4;
    uint ori_offsetB16 = ori_offsetB00 + K * 16;
    {% else %}
    uint ori_offsetB00 = tid / (BLOCK_SIZE_N/4) * N + bx * BLOCK_SIZE_N + (tid % (BLOCK_SIZE_N/4)) * 4;
    uint ori_offsetB16 = ori_offsetB00 + N * 32;
    uint storB = (tid * 4 + tid / (BLOCK_SIZE_N/4) / 4 * 2) * 4;
    {% endif %}

    uint tid224 = tid & 224;
    uint storAB = (tx * 32 * 4 + ty + tx * 2) * 4;
    uint loadA = (((tid & 16) >> 3) | (tid & 1)) << 4;
    uint loadB = ((tid >> 1) & 7) << 4;
    loadA += (tid224 * 32) + (tid224 / 2);
    loadB += (tid224 * 32) + (tid224 / 2);

    // This keeps all prior logic outside of the loops.
    asm("mov.b32 %0, %0;" : "+r"(storAB) : );
    asm("mov.b32 %0, %0;" : "+r"(loadA)  : );
    asm("mov.b32 %0, %0;" : "+r"(loadB)  : );

    float regC[8][4];
    for (int i = 0; i < 8; i++)
        for (int j = 0; j < 4; j++)
            regC[i][j] = 0.0f;

    // bx means in index of this thread block on N dimonsion
    // by means in index of this thread block on M dimonsion
    // index_start and index_end is block index on column
    int index_start = A_block_ptr[by], index_end = A_block_ptr[by+1];
    for (int bcs_col_idx = index_start; bcs_col_idx < index_end; bcs_col_idx += 1)
    {
        {{ IDX_T }} idx = A_block_idx[bcs_col_idx];
        uint bk = idx & 0xffff;

        {% if COMPRESSED %}
            {% if BCSR and BCSC %}
        uint blk_index = idx >> 32;
        uint offsetA00 = ori_offsetA00 + blk_index * BLOCK_SIZE_M * BLOCK_SIZE_K;
        uint offsetA16 = ori_offsetA16 + blk_index * BLOCK_SIZE_M * BLOCK_SIZE_K;
            {% else %}
        offsetA00 += BLOCK_SIZE_M * BLOCK_SIZE_K;
        offsetA16 += BLOCK_SIZE_M * BLOCK_SIZE_K;
            {% endif %}
        {% else %}
            {% if TRANSPOSE_A %}
        uint offsetA00 = ori_offsetA00 + 64 * bk * M;
        uint offsetA16 = ori_offsetA16 + 64 * bk * M;
            {% else %}
        uint offsetA00 = ori_offsetA00 + 64 * bk;
        uint offsetA16 = ori_offsetA16 + 64 * bk;
            {% endif %}
        {% endif %}

        {% if TRANSPOSE_B %}
        uint offsetB00 = ori_offsetB00 + 64 * bk;
        uint offsetB16 = ori_offsetB16 + 64 * bk;
        {% else %}
        uint offsetB00 = ori_offsetB00 + 64 * bk * N;
        uint offsetB16 = ori_offsetB16 + 64 * bk * N;
        {% endif %}

        float4 a00 = {0}, a16 = {0};
        float4 b00 = {0}, b16 = {0};
        a00 = __ldg((const float4*)(add_ptr_f(A_val, offsetA00)));
        a16 = __ldg((const float4*)(add_ptr_f(A_val, offsetA16)));
        b00 = __ldg((const float4*)(add_ptr_f(B, offsetB00)));
        b16 = __ldg((const float4*)(add_ptr_f(B, offsetB16)));

        __syncthreads();

        {% if TRANSPOSE_A %}
        *(float*)&bShare[storA + (0*65*32 + 0)*4] = a00.x;
        *(float*)&bShare[storA + (0*65*32 + 1)*4] = a00.y;
        *(float*)&bShare[storA + (0*65*32 + 2)*4] = a00.z;
        *(float*)&bShare[storA + (0*65*32 + 3)*4] = a00.w;
        *(float*)&bShare[storA + (32*32 + 8*2 + 0*65*32 + 0)*4] = a16.x;
        *(float*)&bShare[storA + (32*32 + 8*2 + 0*65*32 + 1)*4] = a16.y;
        *(float*)&bShare[storA + (32*32 + 8*2 + 0*65*32 + 2)*4] = a16.z;
        *(float*)&bShare[storA + (32*32 + 8*2 + 0*65*32 + 3)*4] = a16.w;
        {% else %}
        *(float*)&bShare[storAB + (0*32 +  0 + 0*65*32)*4] = a00.x;
        *(float*)&bShare[storAB + (1*32 +  0 + 0*65*32)*4] = a00.y;
        *(float*)&bShare[storAB + (2*32 +  0 + 0*65*32)*4] = a00.z;
        *(float*)&bShare[storAB + (3*32 +  0 + 0*65*32)*4] = a00.w;
        *(float*)&bShare[storAB + (0*32 + 16 + 0*65*32)*4] = a16.x;
        *(float*)&bShare[storAB + (1*32 + 16 + 0*65*32)*4] = a16.y;
        *(float*)&bShare[storAB + (2*32 + 16 + 0*65*32)*4] = a16.z;
        *(float*)&bShare[storAB + (3*32 + 16 + 0*65*32)*4] = a16.w;
        {% endif %}

        {% if TRANSPOSE_B %}
        *(float*)&bShare[storAB + (0*32 +  0 + 1*65*32)*4] = b00.x;
        *(float*)&bShare[storAB + (1*32 +  0 + 1*65*32)*4] = b00.y;
        *(float*)&bShare[storAB + (2*32 +  0 + 1*65*32)*4] = b00.z;
        *(float*)&bShare[storAB + (3*32 +  0 + 1*65*32)*4] = b00.w;
        *(float*)&bShare[storAB + (0*32 + 16 + 1*65*32)*4] = b16.x;
        *(float*)&bShare[storAB + (1*32 + 16 + 1*65*32)*4] = b16.y;
        *(float*)&bShare[storAB + (2*32 + 16 + 1*65*32)*4] = b16.z;
        *(float*)&bShare[storAB + (3*32 + 16 + 1*65*32)*4] = b16.w;
        {% else %}
        *(float*)&bShare[storB + (1*65*32 + 0)*4] = b00.x;
        *(float*)&bShare[storB + (1*65*32 + 1)*4] = b00.y;
        *(float*)&bShare[storB + (1*65*32 + 2)*4] = b00.z;
        *(float*)&bShare[storB + (1*65*32 + 3)*4] = b00.w;
        *(float*)&bShare[storB + (32*32 + 8*2 + 1*65*32 + 0)*4] = b16.x;
        *(float*)&bShare[storB + (32*32 + 8*2 + 1*65*32 + 1)*4] = b16.y;
        *(float*)&bShare[storB + (32*32 + 8*2 + 1*65*32 + 2)*4] = b16.z;
        *(float*)&bShare[storB + (32*32 + 8*2 + 1*65*32 + 3)*4] = b16.w;
        {% endif %}

        __syncthreads();

        float regA[8], regB[4];
        #pragma unroll
        for (int j = 0; j < 4; j++)
        {
            // fetch outer product data
            *(float4*)&regA[0] = *(float4*)&bShare[loadA + (32*j +  0)*4];
            *(float4*)&regA[4] = *(float4*)&bShare[loadA + (32*j + 16)*4];
            *(float4*)&regB[0] = *(float4*)&bShare[loadB + (32*j + 65*32)*4];

            for (int i = 0; i < 8; i++)
                for (int j = 0; j < 4; j++)
                    regC[i][j] += regA[i] * regB[j];
        }
        #pragma unroll
        for (int j = 4; j < 8; j++)
        {
            *(float2*)&regA[0] = *(float2*)&bShare[loadA + (32*j +  0 + (j/4)*2)*4];
            *(float2*)&regA[2] = *(float2*)&bShare[loadA + (32*j +  2 + (j/4)*2)*4];
            *(float2*)&regA[4] = *(float2*)&bShare[loadA + (32*j + 16 + (j/4)*2)*4];
            *(float2*)&regA[6] = *(float2*)&bShare[loadA + (32*j + 18 + (j/4)*2)*4];
            *(float2*)&regB[0] = *(float2*)&bShare[loadB + (32*j +  0 + (j/4)*2 + 65*32)*4];
            *(float2*)&regB[2] = *(float2*)&bShare[loadB + (32*j +  2 + (j/4)*2 + 65*32)*4];

            for (int i = 0; i < 8; i++)
                for (int j = 0; j < 4; j++)
                    regC[i][j] += regA[i] * regB[j];
        }
    }

    asm volatile ("mov.u32 %0, %tid.x;"   : "=r"(tid)   :);
    asm volatile ("mov.u32 %0, %ctaid.x;" : "=r"(bx)   :);
    asm volatile ("mov.u32 %0, %ctaid.y;" : "=r"(by) :);

    ty = ((tid & 16) >> 3) + (tid & 1);
    tx = ((tid >> 1) & 7) + ((tid & 224) >> 2) + (ty << 2);

    uint storC = ty*32*8*4 + tx*4;

    tx = tid % 16;
    ty = tid / 16;

    uint readC = ty*32*8 + tx*2 + ((tid & 192)>>2);

    // C should be row major
    C += (by * BLOCK_SIZE_N + ty) * N + (bx * BLOCK_SIZE_M + tx * 2);

    __syncthreads();
    *(float4*)&fShare[storC + 0*32*8] = *(float4*)regC[0];
    *(float4*)&fShare[storC + 1*32*8] = *(float4*)regC[1];
    *(float4*)&fShare[storC + 2*32*8] = *(float4*)regC[2];
    *(float4*)&fShare[storC + 3*32*8] = *(float4*)regC[3];
    __syncthreads();

    float2 c2[8];
    for (int i = 0; i < 8; i++)
        c2[i] = *(float2*)&fShare[readC + i*32];

    // Tree reduce
    for (int j = 4; j > 0; j >>= 1)
        for (int i = 0; i < j; i++) {
            c2[i] = _add(c2[i], c2[i+j]);
        }

    {% if BIASED %}
    *(float2*)C = _add(c2[0], *(float2*)(bias_share + tx*2));
    {% else %}
    *(float2*)C = c2[0];
    {% endif %}

    __syncthreads();
    *(float4*)&fShare[storC + 0*32*8] = *(float4*)regC[4];
    *(float4*)&fShare[storC + 1*32*8] = *(float4*)regC[5];
    *(float4*)&fShare[storC + 2*32*8] = *(float4*)regC[6];
    *(float4*)&fShare[storC + 3*32*8] = *(float4*)regC[7];
    __syncthreads();

    for (int i = 0; i < 8; i++)
        c2[i] = *(float2*)&fShare[readC + i*32];

    // Tree reduce
    for (int j = 4; j > 0; j >>= 1)
        for (int i = 0; i < j; i++) {
            c2[i] = _add(c2[i], c2[i+j]);
        }

    C += 16 * N;
    {% if BIASED %}
    *(float2*)C = _add(c2[0], *(float2*)(bias_share + tx*2));
    {% else %}
    *(float2*)C = c2[0];
    {% endif %}
}
